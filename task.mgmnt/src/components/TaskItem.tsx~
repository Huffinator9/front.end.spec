// src: src/components/TaskItem.tsx

import React, { useState } from "react";
import { Task } from "../types";

interface TaskItemProps {
  task: Task;
  onUpdate: (task: Task) => void;
  onDelete: (id: string) => void;
}

const TaskItem: React.FC<TaskItemProps> = ({ task, onUpdate, onDelete }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [title, setTitle] = useState(task.title);
  const [description, setDescription] = useState(task.description || "");

  const handleSave = () => {
    onUpdate({ ...task, title, description });
    setIsEditing(false);
  };

  return (
    <li className="border p-2 mb-2 rounded flex justify-between items-center">
      {isEditing ? (
        <div className="flex-1 mr-2">
          <input
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="border p-1 rounded w-full mb-1"
          />
          <input
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            className="border p-1 rounded w-full"
          />
        </div>
      ) : (
        <div className="flex-1">
          <h3 className="font-bold">{task.title}</h3>
          <p className="text-gray-600">{task.description}</p>
        </div>
      )}

      <div className="flex space-x-2">
        {isEditing ? (
          <button
            onClick={handleSave}
            className="bg-green-500 text-white px-2 py-1 rounded"
          >
            Save
          </button>
        ) : (
          <button
            onClick={() => setIsEditing(true)}
            className="bg-yellow-500 text-white px-2 py-1 rounded"
          >
            Edit
          </button>
        )}
        <button
          onClick={() => onDelete(task.id)}
          className="bg-red-500 text-white px-2 py-1 rounded"
        >
          Delete
        </button>
      </div>
    </li>
  );
};

export default TaskItem;
